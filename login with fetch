const fetch = require("node-fetch");
const express = require('express');
const bodyParser = require("body-parser");
const cors = require("cors");
const app = express();
const port = 4000;
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');



app.use(cors());
app.use(bodyParser.json());

// 기본 서버 확인 
app.get('/', async(req, res)=>{
  if(res.status(200)){
    res.send('<h1>데이터 통신 성공</h>');
  } else {
    res.status(404).send('서버 오류')
  }

})



// Supabase fetching data Logic
const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

app.get('/accommodation', async (req, res) =>{
  
  try{
    const { data, error } = await supabase
    .from('accoms')
    .select('*');
    if (error) {
      throw error;
    }
    
    // console.log("작동중", data);
    res.json(data);

  } catch(error) {
    res.status(500).json({ error : error.message });
  }
});


app.post("/booking", async (req, res) => {
// to convert month string to index
function monthStringToIndex(monthString) {
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  return months.indexOf(monthString);
}

try{
  const bookingConfirm = req.body;
  const { user :{ user_name, user_email }, bookingAccom, dates: { bookingStartDate, bookingEndDate }, status } = bookingConfirm;

  const startDate = new Date(bookingStartDate[3], monthStringToIndex(bookingStartDate[1]), bookingStartDate[2]);
  const endDate = new Date(bookingEndDate[3], monthStringToIndex(bookingEndDate[1]), bookingEndDate[2]);
  
  // 기간 동안 숙박료
  const timeDifference = endDate.getTime() - startDate.getTime();
  const stayingNights = Math.ceil(timeDifference / (1000 * 60 * 60 * 24)) - 1;

console.log("Counter", stayingNights);

  const bookingData = {
    guest_name: user_name, 
    guest_email: user_email, 
    accom_id : bookingAccom.id,
    accom_name: bookingAccom.accom_name,
    accom_type: bookingAccom.accom_type,
    total_price: stayingNights,
    order_status: status,
    guest_numbers: 1,  // 
    start_date: startDate,
    end_date: endDate,
  }

  const { data, error } = await supabase
  .from('bookings') //table name
  .insert(bookingData);

  if (error) {
    console.error("Error is created during insert DB", error);
    res.status(500).json({message : "Booking failed"});
    return;
  }

  res.json({
      message: "Booking created successfully!",
      bookingData : data,
  });
}
catch(error){
  console.log("Unexpected error:", error);
  res.status(500).json({message : "Booking failed."})
}

});


app.post('/login', async (res, req) => {

  console.log("body",req.body);

  // try{
  // const { email, password } = req.body;

  // const { data, error } = await supabase
  // .from('users')
  // .select('*')
  // .eq('email', email )
  // .single();

  // if(error) {
  //   throw error;
  // }

  // if( !data || data.password !== password){
  //   throw new Error('invalid credentials');
  // }

  // res.json({ message: 'Login successful'});
  // }
  // catch(error){
  //   console.error('Login Failed', error.message);
  //   res.status(401).json({ error : 'Login failed'})
  // }
});





// 네이버 Social Media 로그인 
const client_id = process.env.NAVER_FETCH_API_ID
const client_secret = process.env.NAVER_FETCH_API_KEY
const state = "RANDOM_STATE-anyword";
const redirectURI = encodeURI("http://localhost:3000/callback");
const api_url = "";


app.get("/callback", async function (req, res) {
  const code = req.query.code;
  const state = req.query.state;
  const api_url =
    "https://nid.naver.com/oauth2.0/token?grant_type=authorization_code&client_id=" +
    client_id +
    "&client_secret=" +
    client_secret +
    "&redirect_uri=" +
    redirectURI +
    "&code=" +
    code +
    "&state=" +
    state;


    const response = await fetch(api_url, {
      headers: {
        "X-Naver-Client-Id": client_id,
        "X-Naver-Client-Secret": client_secret,
      },
    });
  
    // 토큰 처리 과정
    const tokenRequest = await response.json();
    
    if ("access_token" in tokenRequest) {
      const { access_token } = tokenRequest;
      const apiUrl = "https://openapi.naver.com/v1/nid/me";
  
      const naverData = await fetch(apiUrl, {
        headers: {
          Authorization: `Bearer ${access_token}`,
        },
      });
  
      const userData = await naverData.json();
  
      const { response :{ name , email }} = userData;
      const naverAuth = {
        name,
        email
      }


      // Check for existing user with the same name and email
      const { data: existingUser, error: userError } = await supabase
        .from('users')
        .select('*') // Select all user data
        .eq('email', email)
        .eq('name', name)  // Add check for name
        .single();

        const redirectUrl = `/mypage?loggedIn=true`; // Base URL for redirect

      if (existingUser) {
        console.log("User with matching name and email already exists:", existingUser);
        redirectUrl += '&existingUser=true'; // Add existingUser param
        return;
      }

      // Insert user if unique
      const { data, error } = await supabase
      .from('users')
      .insert(naverAuth);

      if(error) {
        console.error("Error is created during insert DB", error);
        res.status(500).json({message : "Naver 로그인 실패"});
        return;
      }
      res.json({
        message : "Naver 로그인에 성공하였습니다!",
        data 
      });
      console.log("Insert has been successful");

    }

  });





// 네이버 BOOK Image 받어 오기
app.post('/navebooks', async(req, res)=>{


  try {
    const title = req.body.book
    const images =[]
    for (const book of Object.values(title)){


  const naverUrl = new URL('https://openapi.naver.com/v1/search/book.json');
  naverUrl.searchParams.set('query', book);
  naverUrl.searchParams.set('display', 1);

  const options ={
    method : 'GET',
    headers : {
      'Content-Type': 'application/json',
      'X-Naver-Client-Id': 'ytaQUUoLOhwBVF3BCR1m',
      'X-Naver-Client-Secret': 'FQqOQ31UUj'
    }
  };
  const response = await fetch(naverUrl.toString(), options);

  // console.log("FetchBookImage function", response);

  if(!response.ok){
    throw new Error (`Naver API fetch failed ${response.status}`)
  }

  const data = await response.json();

  // console.log("Response URL", data.items[0]);

  images.push({
    title : data.items[0].title,
    imageURL : data.items[0].image,
    description : data.items[0].description
  })
}
  res.json(images);
// console.log("BookUrl List1", images)
  
} 

catch(error) {
  console.log("Error fetching data at Node", error)
};
})


app.listen(port, ()=>{
  console.log(`http://localhost:${port}/ Let get the hell` )
})
